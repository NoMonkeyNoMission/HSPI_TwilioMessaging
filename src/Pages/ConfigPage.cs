using HomeSeerAPI;
using NullGuard;
using Scheduler;
using System;
using System.Collections.Specialized;
using System.Globalization;
using System.Text;
using System.Web;

namespace Hspi.Pages
{

    /// <summary>
    /// Helper class to generate configuration page for plugin
    /// </summary>
    /// <seealso cref="Scheduler.PageBuilderAndMenu.clsPageBuilder" />
    [NullGuard(ValidationFlags.Arguments | ValidationFlags.NonPublic)]
    internal class ConfigPage : PageHelper
    {
        protected const string IdPrefix = "id_";

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigPage" /> class.
        /// </summary>
        /// <param name="HS">The hs.</param>
        /// <param name="pluginConfig">The plugin configuration.</param>
        public ConfigPage(IHSApplication HS, PluginConfig pluginConfig) : base(HS, pluginConfig, pageName)
        {
        }

        /// <summary>
        /// Gets the name of the web page.
        /// </summary>
        public static string Name => pageName;

        /// <summary>
        /// Get the web page string for the configuration page.
        /// </summary>
        /// <returns>
        /// System.String.
        /// </returns>
        public string GetWebPage()
        {
            try
            {
                reset();

                AddHeader(HS.GetPageHeader(Name, "Configuration", string.Empty, string.Empty, false, false));

                System.Text.StringBuilder stb = new System.Text.StringBuilder();
                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivStart("pluginpage", ""));
                stb.Append(BuildWebPageBody());
                stb.Append(PageBuilderAndMenu.clsPageBuilder.DivEnd());
                AddBody(stb.ToString());

                AddFooter(HS.GetPageFooter());
                suppressDefaultFooter = true;

                return BuildPage();
            }
            catch (Exception)
            {
                return "error";
            }
        }

		/// <summary>
		/// The user has selected a control on the configuration web page.
		/// The post data is provided to determine the control that initiated the post and the state of the other controls.
		/// </summary>
		/// <param name="data">The post data.</param>C:\Users\Larry\Desktop\HSPI_WUWeather\src\Pages\ConfigPage.cs
		/// <param name="user">The name of logged in user.</param>
		/// <param name="userRights">The rights of the logged in user.</param>
		/// <returns>Any serialized data that needs to be passed back to the web page, generated by the clsPageBuilder class.</returns>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "Twilio")]
		public string PostBackProc(string data, [AllowNull]string user, int userRights)
        {
            NameValueCollection parts = HttpUtility.ParseQueryString(data);

            string form = parts["id"];

			if(form == "id_sendTestButton")
			{
				PluginConfig testConfig;
				using(testConfig = new PluginConfig(HS, offline: true))
				{
					PopulatePluginConfig(testConfig, parts);

					string toNumber = parts["testNumber"];

					TwilioServiceFacade twilioService = new TwilioServiceFacade(HS, testConfig.DebugLogging);

					SendMessageActionConfig messageConfig = new SendMessageActionConfig();
					messageConfig.ToNumber = toNumber;
					messageConfig.Message = @"$time: this is a test message from the HomeSeer Twilio Plugin.";

					try
					{
						twilioService.SendMessageToTwilio(testConfig, messageConfig);
						this.divToUpdate.Add(SuccessDivId, @"Test message was sent successfully!");
						this.divToUpdate.Add(ErrorDivId, string.Empty);
					}
					catch(Exception e)
					{
						string errorMessage = e.Message;
						if(errorMessage.Equals("Authenticate"))
						{
							errorMessage = "Invalid Auth Token";
						}
						this.divToUpdate.Add(SuccessDivId, string.Empty);
						this.divToUpdate.Add(ErrorDivId, errorMessage);
					}
				}
			}
			else  if (form == NameToIdWithPrefix(SaveButtonName))
            {
                StringBuilder results = new StringBuilder();

                // Validate
                if (string.IsNullOrWhiteSpace(parts[AuthTokenId]))
                {
                    results.AppendLine("Auth Token is not Valid.<br>");
                }

                if (string.IsNullOrWhiteSpace(parts[AccountSIDId]))
                {
                    results.AppendLine("Account SID is not Valid.<br>");
                }

                if (string.IsNullOrWhiteSpace(parts[FromNumberId]))
                {
                    results.AppendLine("From Number is not Valid.<br>");
                }

                if (results.Length > 0)
                {
					this.divToUpdate.Add(SuccessDivId, string.Empty);
					this.divToUpdate.Add(ErrorDivId, results.ToString());
                }
                else
                {
					this.divToUpdate.Add(SuccessDivId, "Settings have been saved successfully!");
                    this.divToUpdate.Add(ErrorDivId, string.Empty);

					PopulatePluginConfig(this.pluginConfig, parts);

                    this.pluginConfig.FireConfigChanged();
                }
            }

            return base.postBackProc(Name, data, user, userRights);
        }

		private static void PopulatePluginConfig(PluginConfig config, NameValueCollection formData)
		{
			config.AccountSID = formData[AccountSIDId];
			config.AuthToken = formData[AuthTokenId];
			config.FromNumber = formData[FromNumberId];
			config.DebugLogging = formData[DebugLoggingId] == "checked";
		}

        /// <summary>
        /// Builds the web page body for the configuration page.
        /// The page has separate forms so that only the data in the appropriate form is returned when a button is pressed.
        /// </summary>
        private string BuildWebPageBody()
        {
            int i = 0;
            StringBuilder stb = new StringBuilder();

            var tabs = new clsJQuery.jqTabs("tab1id", PageName);
            var tab1 = new clsJQuery.Tab();
            tab1.tabTitle = "Twilio Settings";
            tab1.tabDIVID = String.Format(CultureInfo.InvariantCulture, "tabs{0}", i++);
            tab1.tabContent = BuildSettingTab();
            tabs.tabs.Add(tab1);

            tabs.postOnTabClick = false;
            stb.Append(tabs.Build());

            return stb.ToString();
        }

		private string BuildSettingTab()
        {
            StringBuilder stb = new StringBuilder();
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmSettings", "IdSettings", "Post"));

            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'");
            stb.Append(@"<tr><td colspan=2><div>Register an account at <a href='http://twilio.com' title='Twilio' target='_blank'>Twilio</a> to get started</div></td></tr>");
            stb.Append("<tr height='5'><td style='width:25%'></td><td style='width:75%'></td></tr>");
            stb.Append($"<tr><td class='tablecell'>Account SID:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(AccountSIDId, pluginConfig.AccountSID, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>Auth Token:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(AuthTokenId, pluginConfig.AuthToken, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>From Number:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(FromNumberId, pluginConfig.FromNumber, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>Debug Logging Enabled:</td><td colspan=2 class='tablecell'>{FormCheckBox(DebugLoggingId, string.Empty, this.pluginConfig.DebugLogging)}</ td ></ tr > ");
            stb.Append($"<tr><td colspan=2><div id='{ErrorDivId}' style='color:Red'></div></td><td></td></tr>");
            stb.Append($"<tr><td colspan=2><div id='{SuccessDivId}' style='color:dodgerblue'></div></td><td></td></tr>");
            stb.Append($"<tr><td colspan=2>{FormButton("Send test message", TestButtonName, "Send a test message", false)} {FormButton("Save", SaveButtonName, "Save Settings")}</td></tr>");
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@"</table>");
            stb.Append(@"<div class='gh-section'>");
            stb.Append(@"<p>");
            stb.Append(@"An open-source project by <a href='https://legrego.dev' target='_blank'>Larry Gregory</a> and contibutors.");
            stb.Append(@"</p>");
            stb.Append(@"<p style='height:20px; line-height:20px; font-size:20px'>");
            stb.Append(@"<a href='https://github.com/legrego/HSPI_TwilioMessaging' target='_blank'><img height='20px' src='https://img.shields.io/github/stars/legrego/HSPI_TwilioMessaging.svg?style=social&label=Star&maxAge=2592000' /></a>");
            stb.Append(@"<a style='vertical-align: top; margin-left: 10px;' href='https://github.com/legrego/HSPI_TwilioMessaging' target='_blank'>View and contribute to this plugin's code on GitHub</a>");
            stb.Append(@"</p>");
            stb.Append(@"</div>");

            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

			stb.Append(Properties.Resources.SendTestDialogFile);
			stb.Append(Properties.Resources.ConfigPageScript);

            return stb.ToString();
        }

        private string BuildAboutTab()
        {
            StringBuilder stb = new StringBuilder();
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormStart("ftmSettings", "IdSettings", "Post"));

            stb.Append(@"<br>");
            stb.Append(@"<div>");
            stb.Append(@"<table class='full_width_table'");
            stb.Append("<tr height='5'><td style='width:25%'></td><td style='width:75%'></td></tr>");
            stb.Append($"<tr><td class='tablecell'>Account SID:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(AccountSIDId, pluginConfig.AccountSID, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>Auth Token:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(AuthTokenId, pluginConfig.AuthToken, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>From Number:</td><td class='tablecell' style='width: 100px'>{HtmlTextBox(FromNumberId, pluginConfig.FromNumber, 40)}</td></tr>");
            stb.Append($"<tr><td class='tablecell'>Debug Logging Enabled:</td><td colspan=2 class='tablecell'>{FormCheckBox(DebugLoggingId, string.Empty, this.pluginConfig.DebugLogging)}</ td ></ tr > ");
            stb.Append($"<tr><td colspan=2><div id='{ErrorDivId}' style='color:Red'></div></td><td></td></tr>");
            stb.Append($"<tr><td colspan=2><div id='{SuccessDivId}' style='color:dodgerblue'></div></td><td></td></tr>");
            stb.Append($"<tr><td colspan=2>{FormButton("Send test message", TestButtonName, "Send a test message", false)} {FormButton("Save", SaveButtonName, "Save Settings")}</td></tr>");
            stb.Append("<tr height='5'><td colspan=2></td></tr>");
            stb.Append($"<tr><td colspan=2></td></tr>");
            stb.Append(@"<tr><td colspan=2><div>Register an account at <a href='http://twilio.com' title='Twilio' target='_blank'>Twilio</a> to get started</div></td></tr>");
            stb.Append(@"<tr><td><a href='https://github.com/legrego/HSPI_TwilioMessaging'><img src='https://img.shields.io/github/stars/legrego/HSPI_TwilioMessaging.svg?style=social&label=Star&maxAge=2592000' /></a></td></tr>");

            stb.Append(@"<tr height='5'><td colspan=2></td></tr>");
            stb.Append(@" </table>");
            stb.Append(@"</div>");
            stb.Append(PageBuilderAndMenu.clsPageBuilder.FormEnd());

            stb.Append(Properties.Resources.SendTestDialogFile);
            stb.Append(Properties.Resources.ConfigPageScript);

            return stb.ToString();
        }

        private const string SaveButtonName = "Save";
		private const string TestButtonName = "Test";
        private const string DebugLoggingId = "DebugLoggingId";
        private const string AccountSIDId = "AccountSIDId";
        private const string AuthTokenId = "AuthTokenId";
        private const string FromNumberId = "FromNumberId";
        private const string ErrorDivId = "message_id";
        private const string SuccessDivId = "success_message_id";
        private static readonly string pageName = $"{TwilioMessagingData.PlugInName} Configuration".Replace(' ', '_');
    }
}